<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".CircularActivity">

    <Button
        android:id="@+id/btn1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.2" />

    <Button
        android:id="@+id/btn2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintCircle="@id/btn1"
        app:layout_constraintCircleAngle="120"
        app:layout_constraintCircleRadius="100dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <!--
     # Circular positioning (Added in 1.1)

    You can constrain a widget center
    relative to another widget center, at an angle and a distance.
    This allows you to position a widget on a circle (see Fig. 6).
    The following attributes can be used:

    *layout_constraintCircle : references another widget id
    *layout_constraintCircleRadius : the distance to the other widget center
    *layout_constraintCircleAngle : which angle the widget should be at (in degrees, from 0 to 360)


    We can use Circular positioning between more than one views
    We can assign or position our view like clock which has a center and
    other circle around the center, as it we can circle our view around another
    view
    -->


</androidx.constraintlayout.widget.ConstraintLayout>